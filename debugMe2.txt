let gl;
	
let positions = [];

function init() {

	// 1. Get canvas and setup WebGL context
    const canvas = document.getElementById("gl-canvas");
	gl = canvas.getContext('webgl');

	// 2. Configure viewport
	gl.viewport(0,0,canvas.width,canvas.height);
	gl.clearColor(1.0,1.0,1.0,1.0);
	
	//let box = [0,0,1,0,0,1];

let colors = [];

let boxsize =0.5;	
	
let box = {
		x:0,
		y:0,
		r:1,
		g:0,
		b:0,	
		size:1
		} 
		
	 positions = []
	
	 colors = []; // red
	
	for(let i=-1; i<1-boxsize; i+=boxsize){				        
	 box = {
		x:i + boxsize/2,
		y:0,
		r:Math.random(),
		g:Math.random(),
		b:Math.random(),	
		size:boxsize
		} 
		console.log(box.x)
		
positions.concat(
		box.x - (box.size/2), box.y + (box.size/2),
		box.x - (box.size/2), box.y - (box.size/2),
		box.x + (box.size/2), box.y + (box.size/2),
		
		box.x - (box.size/2), box.y - (box.size/2),
		box.x + (box.size/2), box.y + (box.size/2),
		box.x + (box.size/2), box.y - (box.size/2))
		
	      
	      colors.concat(box.r, box.g, box.b, 1, // red
					        box.r, box.g, box.b, 1, // yellow
				           box.r, box.g, box.b, 1, // blue
	                    box.r, box.g, box.b, 1, // blue
					        box.r, box.g, box.b, 1, // green
					        box.r, box.g, box.b, 1,) // red
	}
	
	
	
	

	// 3. Specify geometry
	/*const positions = [ -1, -1, 
						     -1,  1, 
						      1,  1,
	                     1,  1,
	                     1, -1,
	                    -1, -1];*/

	


	// 4. Init shader program via additional function and bind it
	const program = initShaders(gl, "vertex-shader", "fragment-shader");
	gl.useProgram(program);
	
    // 5. Create VBO
	const vbo = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, vbo)

    // 6. Fill VBO with positions and colors
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions.concat(colors)), gl.STATIC_DRAW);

    // 7. Link data in VBO to shader variables
	const vPosition = gl.getAttribLocation(program, "vPosition");
	gl.enableVertexAttribArray(vPosition);
	gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 8, 0);

	const vColor = gl.getAttribLocation(program, "vColor");
	gl.enableVertexAttribArray(vColor);
	gl.vertexAttribPointer(vColor, 4, gl.FLOAT, false, 16, positions.lenght*4);

	// 8. Render
	render();
};

function render()
{
	gl.clear(gl.COLOR_BUFFER_BIT);
	gl.drawArrays(gl.TRIANGLES, 0, positions.length/2);
}

init();
